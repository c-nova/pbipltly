source('C:/opt/sandbox/testVizR/script.r')
source('C:/opt/sandbox/testVizR/script.r')
source('C:/opt/sandbox/testVizR/script.r')
################# DEBUG in RStudio #################
setwd("C:/opt/sandbox/testVizR")
Values <- read.csv("../testVizRDoc/HR_comma_test.csv", sep = ",")
fileRda = "C:/Users/maotsuka.FAREAST/AppData/Local/Temp/tempData.Rda"
if(file.exists(dirname(fileRda)))
{
if(Sys.getenv("RSTUDIO")!="")
load(file= fileRda)
else
save(list = ls(all.names = TRUE), file=fileRda)
}
source('./r_files/flatten_HTML.r')
####### Validate number of columns and rows ########
errorText <- NULL
#filter out non-numeric columns and constant columns
correctColumn <- function(someColumn) { is.numeric(someColumn) && length(unique(someColumn)) > 1 }
useColumns <- sapply(Values,correctColumn)
if(sum(useColumns) < ncol(Values))
errorText <- "Filtered out non numeric columns and constant columns"
Values <- as.data.frame(Values[,useColumns])
is.numeric(Values[,1])
Values <- read.csv("../testVizRDoc/HR_comma_test.csv", sep = ",")
is.numeric(Values[,1])
is.numeric(Values[,0])
is.numeric(Values[,1])
is.numeric(Values[,2])
is.numeric(Values[,3])
################# DEBUG in RStudio #################
setwd("C:/opt/sandbox/testVizR")
Values <- read.csv("../testVizRDoc/HR_comma_test.csv", sep = ",")
fileRda = "C:/Users/maotsuka.FAREAST/AppData/Local/Temp/tempData.Rda"
if(file.exists(dirname(fileRda)))
{
if(Sys.getenv("RSTUDIO")!="")
load(file= fileRda)
else
save(list = ls(all.names = TRUE), file=fileRda)
}
source('./r_files/flatten_HTML.r')
####### Validate number of columns and rows ########
errorText <- NULL
# filter out < 2 columns and < 2 columns
columnCount <- ncol(Values)
rowCount <- nrow(Values)
if (rowCount < 2 || columnCount < 3) {
plot.new()
errorText<-paste(errorText, "Not enough input dimensions", sep="\n")
title(main = NULL, sub = errorText, outer = FALSE, col.sub = "gray50", cex.sub = 0.75)
quit()
}
################# DEBUG in RStudio #################
setwd("C:/opt/sandbox/testVizR")
Values <- read.csv("../testVizRDoc/HR_comma_test2.csv", sep = ",")
fileRda = "C:/Users/maotsuka.FAREAST/AppData/Local/Temp/tempData.Rda"
if(file.exists(dirname(fileRda)))
{
if(Sys.getenv("RSTUDIO")!="")
load(file= fileRda)
else
save(list = ls(all.names = TRUE), file=fileRda)
}
source('./r_files/flatten_HTML.r')
####### Validate number of columns and rows ########
errorText <- NULL
# filter out < 2 columns and < 2 columns
columnCount <- ncol(Values)
rowCount <- nrow(Values)
if (rowCount < 2 || columnCount < 3) {
plot.new()
errorText<-paste(errorText, "Not enough input dimensions", sep="\n")
title(main = NULL, sub = errorText, outer = FALSE, col.sub = "gray50", cex.sub = 0.75)
quit()
}
############### Library Declarations ###############
libraryRequireInstall("plotly")
################### Actual code ####################
p = plot_ly(Values,
x = Values[,1],
y = Values[,2],
z = Values[,3],
type = "heatmap"
)
############# Create and save widget ###############
internalSaveWidget(p, 'out.html')
source('./r_files/flatten_HTML.r')
############### Library Declarations ###############
libraryRequireInstall("ggplot2")
libraryRequireInstall("plotly")
cutStr2Show = function(strText, strCex = 0.8, abbrTo = 100, isH = TRUE, maxChar = 0, partAvailable = 1)
{
# strText = text to modify
# strCex = font size
# abbrTo = very long string will be abbreviated to "abbrTo" characters
# isH = "is horizontal" ?
# maxChar = text smaller than maxChar is replaced by NULL
# partAvailable = which portion of window is available for text, in [0,1]
if(is.null(strText))
return (NULL)
SCL = 0.094*strCex
pardin = par()$din
gStand = partAvailable*(isH*pardin[1]+(1-isH)*pardin[2]) /SCL
# if very very long abbreviate
if(nchar(strText)>abbrTo && nchar(strText)> 1)
strText = abbreviate(strText, abbrTo)
# if looooooong convert to lo...
if(nchar(strText)>round(gStand) && nchar(strText)> 1)
strText = paste(substring(strText,1,floor(gStand)),"...",sep="")
# if shorter than maxChar remove
if(gStand<=maxChar)
strText = NULL
return(strText)
}
####### Validate number of columns and rows ########
pbiWarning <- NULL
errorText <- NULL
# filter out < 2 columns and < 2 columns
columnCount <- ncol(Values)
rowCount <- nrow(Values)
if (rowCount < 2 || columnCount < 3) {
showWarnings = TRUE
pbiWarning2 <- cutStr2Show("Not enough input dimensions")
pbiWarning <- paste(pbiWarning, "<br>", pbiWarning2);
}
if(!showWarnings)
pbiWarning = NULL
gg = gg + labs (title = pbiWarning, caption = NULL) + theme_bw() +
theme(plot.title  = element_text(hjust = 0.5, size = 12),
axis.title=element_text(size =  sizeLabel),
axis.text=element_text(size =  sizeTicks),
panel.border = element_blank())
plot.new()
errorText<-paste(errorText, "Not enough input dimensions", sep="\n")
p <- title(main = NULL, sub = errorText, outer = FALSE, col.sub = "gray50", cex.sub = 0.75)
p <- plot.new()
errorText<-paste(errorText, "Not enough input dimensions", sep="\n")
title(main = NULL, sub = errorText, outer = FALSE, col.sub = "gray50", cex.sub = 0.75)
gg = ggplot()
gg = gg + labs (title = pbiWarning, caption = NULL) + theme_bw() +
theme(plot.title  = element_text(hjust = 0.5, size = 12),
axis.title=element_text(size =  sizeLabel),
axis.text=element_text(size =  sizeTicks),
panel.border = element_blank())
w <- plot.new()
errorText<-paste(errorText, "Not enough input dimensions", sep="\n")
title(main = NULL, sub = errorText, outer = FALSE, col.sub = "gray50", cex.sub = 0.75)
p <- plotly_build(w)
plot.new(w)
w <- title(main = NULL, sub = errorText, outer = FALSE, col.sub = "gray50", cex.sub = 0.75)
plot(Values)
pbiWarning<-NULL
pbiWarning <- paste(pbiWarning, "<br>", "Not enough input dimensions");
gg = ggplot()
gg = gg + labs (title = pbiWarning, caption = NULL) + theme_bw() +
theme(plot.title  = element_text(hjust = 0.5, size = 12),
axis.title=element_text(size =  11),
axis.text=element_text(size =  8),
panel.border = element_blank())
p <- plotly_build(gg)
internalSaveWidget(p, 'out.html')
source('./r_files/flatten_HTML.r')
internalSaveWidget(p, 'out.html')
p = plot_ly(Values,
x = Values[,1],
y = Values[,2]
type = "scatter"
)
plot_ly(Values,
x = Values[,1],
y = Values[,2]
type = "scatter")
Values <- read.csv("../testVizRDoc/HR_comma_test2.csv", sep = ",")
plot_ly(Values,
x = Values[,1],
y = Values[,2]
type = "scatter")
Values
plot_ly(Values,
x = Values[,1],
y = Values[,2],
type = "scatter")
plot_ly(Values,
x = Values[,1],
y = Values[,2],
type = "markers")
plot_ly(Values,
x = Values[,1],
y = Values[,2],
type = "histogram")
plot_ly(Values, x = NULL, y = NULL, type = "histogram")
plot_ly(type = "histogram")
plot_ly()
plot_ly(type = "histogram")
Layout(title = "test")
plot_ly(type = "histogram") %>% layout(title = "Test")
plot_ly(type = "histogram") %>% layout(title = "Test", showgrid = F)
plot_ly(type = "heatmap") %>% layout(title = "Test", showgrid = F)
plot_ly(type = "heatmap") %>% layout(title = "Test")
plot_ly(type = "heatmap") %>% layout(title = "Test", xaxis(visible = F))
plot_ly(type = "heatmap", visible = F) %>% layout(title = "Test", xaxis(visible = F))
plot_ly(type = "heatmap", visible = F) %>% layout(title = "Test"
)
plot_ly(type = "heatmap", visible = F, showgrid = F) %>% layout(title = "Test")
plot_ly(type = "heatmap", visible = F, showlegend = F) %>% layout(title = "Test")
